import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Textarea } from "@/components/ui/textarea";
import { ScrollArea } from "@/components/ui/scroll-area";
import { 
  FileText, Download, Mail, User, Briefcase, CheckCircle, 
  Clock, DollarSign, MapPin, AlertCircle, Sparkles,
  ClipboardList, FileCheck, Gavel
} from "lucide-react";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

interface DocumentPacket {
  id: string;
  userId: string;
  jobId: string;
  matchId?: string;
  generatedAt: string;
  jobTitle: string;
  company: string;
  country: string;
  coverLetter: string;
  resumeTemplate: string;
  applicationEmail: string;
  visaDocuments: string[];
  legalForms: string[];
  interviewPrep: string;
  checklist: string[];
  estimatedCosts: {
    visaFees: string;
    documentFees: string;
    totalEstimate: string;
  };
  timeline: string;
}

export default function Documents() {
  const { toast } = useToast();
  const [generating, setGenerating] = useState(false);
  const [documentPacket, setDocumentPacket] = useState<DocumentPacket | null>(null);
  
  // Get document packet ID from URL params (in a real app, use router)
  const [packetId] = useState(new URLSearchParams(window.location.search).get('packet') || '');
  
  const handleGenerateDocuments = async (userId: string, jobId: string, matchId?: string) => {
    setGenerating(true);
    try {
      const response = await apiRequest("POST", "/api/generate-documents", {
        userId,
        jobId,
        matchId
      });
      const packet = await response.json();
      setDocumentPacket(packet);
      
      toast({
        title: "Documents Generated Successfully!",
        description: "Your complete job application packet is ready for download.",
      });
    } catch (error: any) {
      toast({
        title: "Error Generating Documents",
        description: error.message || "Please try again later",
        variant: "destructive",
      });
    } finally {
      setGenerating(false);
    }
  };

  // Demo: Generate documents for sample job
  useEffect(() => {
    if (!packetId && !documentPacket) {
      // Auto-generate for demo purposes
      handleGenerateDocuments("user-1", "job-1", "match-1");
    }
  }, []);

  const downloadDocument = (content: string, filename: string) => {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.style.display = 'none';
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);
  };

  const downloadAllDocuments = () => {
    if (!documentPacket) return;
    
    const allContent = `
COMPLETE JOB APPLICATION PACKET
Generated by Bridge AI Agent
${new Date(documentPacket.generatedAt).toLocaleDateString()}

Job: ${documentPacket.jobTitle} at ${documentPacket.company}
Location: ${documentPacket.country}

=== COVER LETTER ===
${documentPacket.coverLetter}

=== RESUME TEMPLATE ===
${documentPacket.resumeTemplate}

=== APPLICATION EMAIL ===
${documentPacket.applicationEmail}

=== INTERVIEW PREPARATION ===
${documentPacket.interviewPrep}

=== REQUIRED DOCUMENTS ===
Visa Documents:
${documentPacket.visaDocuments.map(doc => `• ${doc}`).join('\n')}

Legal Forms:
${documentPacket.legalForms.map(form => `• ${form}`).join('\n')}

=== ACTION CHECKLIST ===
${documentPacket.checklist.map((item, index) => `${index + 1}. ${item}`).join('\n')}

=== ESTIMATED COSTS ===
Visa Fees: ${documentPacket.estimatedCosts.visaFees}
Document Fees: ${documentPacket.estimatedCosts.documentFees}
Total Estimate: ${documentPacket.estimatedCosts.totalEstimate}

=== TIMELINE ===
${documentPacket.timeline}
    `;

    downloadDocument(allContent, `Bridge_Job_Application_Packet_${documentPacket.company.replace(/\s+/g, '_')}.txt`);
  };

  if (generating) {
    return (
      <div className="min-h-screen bg-gray-50 py-12">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <div className="animate-spin w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full mx-auto mb-6"></div>
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Generating Your Document Packet</h2>
            <p className="text-gray-600">
              Our AI agent is creating customized forms, templates, and guidance for your international job application...
            </p>
          </div>
        </div>
      </div>
    );
  }

  if (!documentPacket) {
    return (
      <div className="min-h-screen bg-gray-50 py-12">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <FileText className="h-16 w-16 text-gray-400 mx-auto mb-6" />
            <h2 className="text-2xl font-bold text-gray-900 mb-4">No Document Packet Found</h2>
            <p className="text-gray-600 mb-6">
              Generate a complete job application packet from your matches page.
            </p>
            <Button onClick={() => window.location.href = '/matches'}>
              View My Matches
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h1 className="text-3xl md:text-4xl font-bold text-gray-900">
                Job Application Packet
              </h1>
              <p className="text-lg text-gray-600 mt-2">
                Complete documentation for {documentPacket.jobTitle} at {documentPacket.company}
              </p>
            </div>
            <div className="flex items-center space-x-4">
              <Badge variant="secondary" className="bg-blue-100 text-blue-800">
                <Sparkles className="h-4 w-4 mr-1" />
                AI Generated
              </Badge>
              <Button onClick={downloadAllDocuments} data-testid="button-download-all">
                <Download className="h-4 w-4 mr-2" />
                Download All
              </Button>
            </div>
          </div>

          {/* Job Info Card */}
          <Card className="mb-6">
            <CardContent className="pt-6">
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div className="flex items-center">
                  <Briefcase className="h-5 w-5 text-gray-400 mr-2" />
                  <div>
                    <div className="text-sm text-gray-600">Position</div>
                    <div className="font-medium">{documentPacket.jobTitle}</div>
                  </div>
                </div>
                <div className="flex items-center">
                  <MapPin className="h-5 w-5 text-gray-400 mr-2" />
                  <div>
                    <div className="text-sm text-gray-600">Location</div>
                    <div className="font-medium">{documentPacket.country}</div>
                  </div>
                </div>
                <div className="flex items-center">
                  <DollarSign className="h-5 w-5 text-gray-400 mr-2" />
                  <div>
                    <div className="text-sm text-gray-600">Est. Total Cost</div>
                    <div className="font-medium">{documentPacket.estimatedCosts.totalEstimate}</div>
                  </div>
                </div>
                <div className="flex items-center">
                  <Clock className="h-5 w-5 text-gray-400 mr-2" />
                  <div>
                    <div className="text-sm text-gray-600">Generated</div>
                    <div className="font-medium">{new Date(documentPacket.generatedAt).toLocaleDateString()}</div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Document Tabs */}
        <Tabs defaultValue="overview" className="space-y-6">
          <TabsList className="grid w-full grid-cols-2 md:grid-cols-6">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="documents">Documents</TabsTrigger>
            <TabsTrigger value="templates">Templates</TabsTrigger>
            <TabsTrigger value="legal">Legal Forms</TabsTrigger>
            <TabsTrigger value="checklist">Checklist</TabsTrigger>
            <TabsTrigger value="costs">Costs</TabsTrigger>
          </TabsList>

          {/* Overview Tab */}
          <TabsContent value="overview">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <Clock className="h-5 w-5 mr-2 text-blue-600" />
                    Timeline
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="whitespace-pre-wrap text-gray-700">{documentPacket.timeline}</div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <User className="h-5 w-5 mr-2 text-green-600" />
                    Interview Preparation
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ScrollArea className="h-60">
                    <div className="whitespace-pre-wrap text-gray-700 text-sm">{documentPacket.interviewPrep}</div>
                  </ScrollArea>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    className="mt-4"
                    onClick={() => downloadDocument(documentPacket.interviewPrep, 'Interview_Preparation_Guide.txt')}
                    data-testid="button-download-interview-prep"
                  >
                    <Download className="h-4 w-4 mr-2" />
                    Download Guide
                  </Button>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Documents Tab */}
          <TabsContent value="documents">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    <div className="flex items-center">
                      <FileCheck className="h-5 w-5 mr-2 text-blue-600" />
                      Visa Documents Required
                    </div>
                    <Badge variant="outline">{documentPacket.visaDocuments.length} items</Badge>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-3">
                    {documentPacket.visaDocuments.map((doc, index) => (
                      <li key={index} className="flex items-center">
                        <CheckCircle className="h-4 w-4 text-green-500 mr-3" />
                        <span className="text-gray-700">{doc}</span>
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    <div className="flex items-center">
                      <Gavel className="h-5 w-5 mr-2 text-purple-600" />
                      Legal Forms
                    </div>
                    <Badge variant="outline">{documentPacket.legalForms.length} forms</Badge>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-3">
                    {documentPacket.legalForms.map((form, index) => (
                      <li key={index} className="flex items-center">
                        <AlertCircle className="h-4 w-4 text-yellow-500 mr-3" />
                        <span className="text-gray-700">{form}</span>
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Templates Tab */}
          <TabsContent value="templates">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    <div className="flex items-center">
                      <Mail className="h-5 w-5 mr-2 text-blue-600" />
                      Application Email
                    </div>
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={() => downloadDocument(documentPacket.applicationEmail, 'Application_Email.txt')}
                      data-testid="button-download-email"
                    >
                      <Download className="h-4 w-4 mr-2" />
                      Download
                    </Button>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <Textarea
                    value={documentPacket.applicationEmail}
                    readOnly
                    className="min-h-40 font-mono text-sm"
                  />
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    <div className="flex items-center">
                      <FileText className="h-5 w-5 mr-2 text-green-600" />
                      Cover Letter
                    </div>
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={() => downloadDocument(documentPacket.coverLetter, 'Cover_Letter.txt')}
                      data-testid="button-download-cover-letter"
                    >
                      <Download className="h-4 w-4 mr-2" />
                      Download
                    </Button>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ScrollArea className="h-60">
                    <div className="whitespace-pre-wrap text-sm text-gray-700">{documentPacket.coverLetter}</div>
                  </ScrollArea>
                </CardContent>
              </Card>
            </div>

            <Card className="mt-6">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <div className="flex items-center">
                    <User className="h-5 w-5 mr-2 text-purple-600" />
                    Resume Template (Optimized for {documentPacket.country})
                  </div>
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={() => downloadDocument(documentPacket.resumeTemplate, 'Resume_Template.txt')}
                    data-testid="button-download-resume"
                  >
                    <Download className="h-4 w-4 mr-2" />
                    Download
                  </Button>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <Textarea
                  value={documentPacket.resumeTemplate}
                  readOnly
                  className="min-h-60 font-mono text-sm"
                />
              </CardContent>
            </Card>
          </TabsContent>

          {/* Legal Forms Tab */}
          <TabsContent value="legal">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Gavel className="h-5 w-5 mr-2 text-red-600" />
                  Required Legal Documentation
                </CardTitle>
                <CardDescription>
                  Important legal forms and documents required for working in {documentPacket.country}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
                  <div className="flex items-center">
                    <AlertCircle className="h-5 w-5 text-yellow-600 mr-2" />
                    <span className="font-medium text-yellow-800">Legal Disclaimer</span>
                  </div>
                  <p className="text-yellow-700 text-sm mt-1">
                    This is AI-generated guidance. Always consult with qualified immigration attorneys 
                    and official government sources for legal advice.
                  </p>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <h4 className="font-semibold mb-3">Visa & Work Permit Forms:</h4>
                    <ul className="space-y-2">
                      {documentPacket.visaDocuments.map((doc, index) => (
                        <li key={index} className="flex items-center text-sm">
                          <FileCheck className="h-4 w-4 text-blue-500 mr-2" />
                          {doc}
                        </li>
                      ))}
                    </ul>
                  </div>

                  <div>
                    <h4 className="font-semibold mb-3">Additional Legal Forms:</h4>
                    <ul className="space-y-2">
                      {documentPacket.legalForms.map((form, index) => (
                        <li key={index} className="flex items-center text-sm">
                          <Gavel className="h-4 w-4 text-purple-500 mr-2" />
                          {form}
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Checklist Tab */}
          <TabsContent value="checklist">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <ClipboardList className="h-5 w-5 mr-2 text-green-600" />
                  Step-by-Step Action Checklist
                </CardTitle>
                <CardDescription>
                  Complete guide from application to job start
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {documentPacket.checklist.map((item, index) => (
                    <div key={index} className="flex items-start">
                      <div className="w-8 h-8 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-semibold mr-4 mt-0.5">
                        {index + 1}
                      </div>
                      <div className="flex-1">
                        <p className="text-gray-800">{item}</p>
                      </div>
                    </div>
                  ))}
                </div>

                <div className="mt-6 pt-6 border-t">
                  <Button 
                    onClick={() => downloadDocument(
                      documentPacket.checklist.map((item, index) => `${index + 1}. ${item}`).join('\n\n'),
                      'Action_Checklist.txt'
                    )}
                    data-testid="button-download-checklist"
                  >
                    <Download className="h-4 w-4 mr-2" />
                    Download Checklist
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Costs Tab */}
          <TabsContent value="costs">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <DollarSign className="h-5 w-5 mr-2 text-green-600" />
                    Estimated Costs
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex justify-between items-center py-2 border-b">
                      <span className="text-gray-600">Visa Fees</span>
                      <span className="font-semibold">{documentPacket.estimatedCosts.visaFees}</span>
                    </div>
                    <div className="flex justify-between items-center py-2 border-b">
                      <span className="text-gray-600">Document Processing</span>
                      <span className="font-semibold">{documentPacket.estimatedCosts.documentFees}</span>
                    </div>
                    <div className="flex justify-between items-center py-2 text-lg font-bold border-t-2">
                      <span>Total Estimate</span>
                      <span className="text-blue-600">{documentPacket.estimatedCosts.totalEstimate}</span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Important Notes</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3 text-sm text-gray-600">
                    <p className="flex items-start">
                      <AlertCircle className="h-4 w-4 text-yellow-500 mr-2 mt-0.5" />
                      Costs are estimates and may vary based on current government fees and exchange rates.
                    </p>
                    <p className="flex items-start">
                      <Clock className="h-4 w-4 text-blue-500 mr-2 mt-0.5" />
                      Processing times vary by country and can change based on current immigration policies.
                    </p>
                    <p className="flex items-start">
                      <FileCheck className="h-4 w-4 text-green-500 mr-2 mt-0.5" />
                      Additional costs may include translation services, medical exams, and courier fees.
                    </p>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}